package com.concurrency;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ExploitLockExample {

	private class ResourceOne {
		@SuppressWarnings("unused")
		public int myVar = 100;
		public Lock rOneLock = new ReentrantLock();
	}

	private class ResourceTwo {
		@SuppressWarnings("unused")
		public int myVar = 1000;		
		public Lock rTwoLock = new ReentrantLock();		
	}

	private class FirstTask implements Runnable {
		
		ResourceOne rOne;
		ResourceTwo rTwo;
		
		public FirstTask(ResourceOne rOne, ResourceTwo rTwo) {
			this.rOne = rOne;
			this.rTwo = rTwo;
		}


		@Override
		public void run() {
			try {

				rOne.rOneLock.lock();
				System.out.println("Lock acquired on ResourceOne by " + Thread.currentThread().getName());
				
				rOne.myVar++;
				Thread.sleep(1000);

				rTwo.rTwoLock.lock();
				System.out.println("Lock acquired on ResourceTwo by " + Thread.currentThread().getName());

				rTwo.myVar--;
				Thread.sleep(1000);
				
				rTwo.rTwoLock.unlock();
				System.out.println("Lock on ResourceTwo released by " + Thread.currentThread().getName());

				rOne.rOneLock.unlock();
				System.out.println("Lock on ResourceOne released by " + Thread.currentThread().getName());


			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
	}
	
	private class SecondTask implements Runnable {

		ResourceOne rOne;
		ResourceTwo rTwo;
		
		public SecondTask(ResourceOne rOne, ResourceTwo rTwo) {
			this.rOne = rOne;
			this.rTwo = rTwo;
		}

		@Override
		public void run() {
			try {
				
				rTwo.rTwoLock.lock();
				System.out.println("Lock acquired on ResourceTwo by " + Thread.currentThread().getName());
				
				rTwo.myVar++;
				Thread.sleep(1000);

				rOne.rOneLock.lock();
				System.out.println("Lock acquired on ResourceOne by " + Thread.currentThread().getName());
				
				rOne.myVar--;				
				Thread.sleep(1000);
				
				rOne.rOneLock.unlock();
				System.out.println("Lock on ResourceTwo released by " + Thread.currentThread().getName());
				
				rTwo.rTwoLock.unlock();
				System.out.println("Lock on ResourceTwo released by " + Thread.currentThread().getName());

				
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		
	}
	
	private void triggerDeadLock() throws InterruptedException {
		ResourceOne r1 = new ResourceOne();
		ResourceTwo r2 = new ResourceTwo();
		
		Thread firstTaskThread = new Thread ( new FirstTask(r1, r2), "firstTaskThread");
		Thread secondTaskThread = new Thread ( new SecondTask(r1, r2), "secondTaskThread");
		
		System.out.println("starting the two threads...");
		
		firstTaskThread.start();
		secondTaskThread.start();
		
		firstTaskThread.join();
		secondTaskThread.join();
		
		System.out.println("Thetwo threads are done"); 
	}
	
	
	public static void main(String[] args) throws Exception {
		ExploitLockExample example = new ExploitLockExample();
		example.triggerDeadLock();
	}

}
